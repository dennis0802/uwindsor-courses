import java.io.*;
import java.util.ArrayList;

public class A5{

static int pointer = -1;	
static ArrayList tokens = new ArrayList();

public A5() {
	super();

}

public static void main ( String [] args ) throws Exception {
    // construct the token array
    BufferedWriter bw = new BufferedWriter(new FileWriter("a5.output"));
    A5Scanner scanner = new A5Scanner(new FileInputStream(new File("A5.tiny")));
    // note that yylex () is the default method to get the next token in scanner that is generated by JLlex .
    Symbol token;
    while((token = scanner.yylex()).sym != A5Sym.EOF){
        tokens.add(token);
    }
    tokens.add(token) ; // add EOF as the last token in the array
    boolean legal = program() && nextToken().sym == A5Sym.EOF;
    bw.write ((legal) ?"legal":"illegal");
    bw.close () ;
}

/**  program-->methodDecl methods
*/
static boolean program() throws Exception{
	int savedPointer = pointer;

	if (methodDecl() && methods()) {
		return true;
	}
	pointer = savedPointer;
	return false;
}

/**  methods-->program|empty
*/
static boolean methods() throws Exception{
	int savedPointer = pointer;

	if (program()) {
		return true;
	}
	pointer = savedPointer;
	return true;
}

/**  methodDecl-->methodName(formalParam) stmts
*/
static boolean methodDecl() throws Exception{
	int savedPointer = pointer;
	if(methodName() && nextToken().sym == A5Sym.LPAREN && formalParam() && nextToken().sym == A5Sym.RPAREN && stmts()){
		return true;
	}
	pointer = savedPointer;
	return false;
}

/**  methodName-->TYPE MAIN ID | TYPE ID
*/
static boolean methodName() throws Exception{
	int savedPointer = pointer;
	if (nextToken().sym == A5Sym.TYPE && nextToken().sym == A5Sym.MAIN && nextToken().sym == A5Sym.ID){
		return true;
	} 
	pointer = savedPointer;
	if (nextToken().sym == A5Sym.TYPE && nextToken().sym == A5Sym.ID){
		return true;
	} 
	pointer = savedPointer;
	return false;
}

/** formalParam --> expr formalParams | EMPTY
*/
static boolean formalParam() throws Exception{
	int savedPointer=pointer;
	if (nextToken().sym == A5Sym.TYPE && nextToken().sym == A5Sym.ID && formalParams()){
		return true;
	} 
	pointer = savedPointer;
	return true;
}

/** formalParams --> COMMA TYPE ID formalParams | EMPTY
*/
static boolean formalParams() throws Exception{
	int savedPointer=pointer;
	if(nextToken().sym == A5Sym.COMMA && nextToken().sym == A5Sym.TYPE && nextToken().sym == A5Sym.ID && formalParams()){
		return true;
	}
	pointer = savedPointer;
	return true;
}


/**  stmts-->statement stmtsPrime
*/
static boolean stmts() throws Exception{
	int savedPointer = pointer;

	if (statement() && stmtsPrime()) {
		return true;
	}
	pointer = savedPointer;
	if (statement()) {
		return true;
	}
	pointer = savedPointer;
	return false;
}

/**  stmtsPrime-->stmts|EMPTY
*/
static boolean stmtsPrime() throws Exception{
	int savedPointer = pointer;

	if (stmts()) {
		return true;
	}
	pointer = savedPointer;
	return  true;	
}

/** stmt--> assign
 *  stmt--> declare
 *  stmt--> returnStmt
 *  stmt--> read
 *  stmt--> write
 *  stmt--> if
 *  stmt--> block
*/
static boolean statement() throws Exception {
	int savedPointer = pointer;
	if (assignment() && nextToken().sym == A5Sym.SEMICOLON) {
		return true;
	}
	pointer = savedPointer;
	if (declare() && nextToken().sym == A5Sym.SEMICOLON) {
		return true;
	}
	pointer = savedPointer;
	if (returnStmt() && nextToken().sym == A5Sym.SEMICOLON) {
		return true;
	}
	pointer = savedPointer;
	if (read() && nextToken().sym == A5Sym.SEMICOLON) {
		return true;
	}
	pointer = savedPointer;
	if (write() && nextToken().sym == A5Sym.SEMICOLON) {
		return true;
	}
	pointer = savedPointer;
	if (ifStmt()){
		return true;
	}
	pointer = savedPointer;
	if(nextToken().sym == A5Sym.BEGIN && stmts() && nextToken().sym == A5Sym.END){
		return true;
	}
	pointer = savedPointer;
	return false;
}

/**     assignment--> ID=expr
        assignment--> ID=QSTRING
*/
static boolean  assignment () throws Exception{
	int savedPointer= pointer;
	if (nextToken().sym==A5Sym.ID && nextToken().sym==A5Sym.ASSIGN && expr()) {
		return true;
	}
	pointer = savedPointer;
	if (nextToken().sym==A5Sym.ID && nextToken().sym==A5Sym.ASSIGN && nextToken().sym == A5Sym.QSTRING) {
		return true;
 	}
	pointer = savedPointer;
	return false;
}

/**		declare--> TYPE assignment
		declare--> TYPE ID
*/
static boolean declare () throws Exception{
	int savedPointer = pointer;
	if(nextToken().sym == A5Sym.TYPE && assignment()){
		return true;		
	}
	pointer = savedPointer;
	if(nextToken().sym == A5Sym.TYPE && nextToken().sym==A5Sym.ID){
		return true;		
	}
	pointer = savedPointer;
	return false;
}

/**		returnStmt--> return expr
*/
static boolean returnStmt() throws Exception{
	int savedPointer = pointer;
	if(nextToken().sym == A5Sym.RETURN && expr()){
		return true;		
	}
	pointer = savedPointer;
	return false;
}

/**		read--> READ(ID, QSTRING)
 */
static boolean read() throws Exception{
	int savedPointer = pointer;
	if(nextToken().sym == A5Sym.READ && nextToken().sym == A5Sym.LPAREN && nextToken().sym == A5Sym.ID && nextToken().sym == A5Sym.COMMA 
	    && nextToken().sym == A5Sym.QSTRING && nextToken().sym == A5Sym.RPAREN){
		return true;
	}
	pointer = savedPointer;
	return false;
}

/**		write--> WRITE(expr, QSTRING)
 */
static boolean write() throws Exception{
	int savedPointer = pointer;
	if(nextToken().sym == A5Sym.WRITE && nextToken().sym == A5Sym.LPAREN && expr() && nextToken().sym == A5Sym.COMMA 
	    && nextToken().sym == A5Sym.QSTRING && nextToken().sym == A5Sym.RPAREN){
		return true;
	}
	pointer = savedPointer;
	return false;
}

/**		if--> if(boolExpr) stmts elseBlock
 */
static boolean ifStmt() throws Exception{
	int savedPointer = pointer;
	if(nextToken().sym == A5Sym.IF && nextToken().sym == A5Sym.LPAREN && boolExpr() && nextToken().sym == A5Sym.RPAREN && stmts() && elseBlock()){
		return true;
	}
	pointer = savedPointer;
	return false;
}

/**		elseBlock--> else stmts | empty
 */
static boolean elseBlock() throws Exception{
	int savedPointer = pointer;
	if(nextToken().sym == A5Sym.ELSE && stmts()){
		return true;
	}
	pointer = savedPointer;
	return true;
}

/** expr--> term exprs
*/
static boolean expr() throws Exception {
	int savedPointer = pointer;
	if (term() && exprs()) {
		return true;
	}
	pointer = savedPointer;
	return false;
}

/** exprs--> ARITH expr|empty
*/
static boolean exprs() throws Exception{
	int savedPointer = pointer;
	if(nextToken().sym == A5Sym.ARITH && expr()){
		return true;
	}
	pointer = savedPointer;
	return true;
}

/** boolExpr--> expr|expr bool expr
 */
static boolean boolExpr() throws Exception{
	int savedPointer = pointer;
	if((expr() && nextToken().sym == A5Sym.BOOL && expr()) || nextToken().sym == A5Sym.BOOLVAL){
		return true;
	}
	pointer = savedPointer;
	return false;
}

/** exprList --> expr actualParams | EMPTY
*/
static boolean exprList() throws Exception {
	int savedPointer=pointer;
	if (expr() && actualParams()){
		return true;
	} 
	pointer = savedPointer;
	return true;
}

/** actualParams --> COMMA expr actualParams | EMPTY
*/
static boolean actualParams() throws Exception{
	int savedPointer=pointer;
	if(nextToken().sym == A5Sym.COMMA && expr() && actualParams()){
		return true;
	}
	pointer = savedPointer;
	return true;
}

/** term --> factor terms
*/
static boolean term() throws Exception {
	int savedPointer = pointer;
	if (factor() && terms()) {
		return true;
	}
	pointer = savedPointer;
	return false;
}

/** terms --> ARITH term | empty
*/
static boolean terms() throws Exception{
	int savedPointer = pointer;
	if(nextToken().sym == A5Sym.ARITH && term()){
		return true;
	}
	pointer = savedPointer;
	return true;
}

/** factor --> ID | NUMBER | functionCall | (Expr)
*/
static boolean factor() throws Exception{
	int savedPointer = pointer;
	if (functionCall()) {
		return true;
	}
	pointer=savedPointer;
	int sym=nextToken().sym;
	if (sym == A5Sym.ID || 
		 sym == A5Sym.NUMBER) {
		return true;
	}
	pointer = savedPointer;
	if (nextToken().sym==A5Sym.LPAREN && expr() && nextToken().sym==A5Sym.RPAREN) return true;
	pointer = savedPointer;
	return false;
}

/** functionCall-->ID(exprList)
*/
static boolean functionCall() throws Exception  {
	int savedPointer = pointer;
	if (nextToken().sym == A5Sym.ID
		&& nextToken().sym == A5Sym.LPAREN
		&& exprList()
		&& nextToken().sym == A5Sym.RPAREN)
		return true;
	pointer = savedPointer;
	return false;
}

static Symbol nextToken() {
	if (pointer < tokens.size()-1) {
		pointer++;
		Symbol token = (Symbol) tokens.get(pointer);
		return token;
	} 
	else
		return null;
}
}
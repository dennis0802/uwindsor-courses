Script started on 2022-07-19 17:27:11-04:00 [TERM="xterm-256color" TTY="/dev/pts/3" COLUMNS="120" LINES="30"]
]0;dennis@LAPTOP-Dennis: ~/COMP3300/A4[01;32mdennis@LAPTOP-Dennis[00m:[01;34m~/COMP3300/A4[00m$ ls
a4.c  a4trace.txt
]0;dennis@LAPTOP-Dennis: ~/COMP3300/A4[01;32mdennis@LAPTOP-Dennis[00m:[01;34m~/COMP3300/A4[00m$ cat a4.c
/*
 * Assignment 4
 * Developer: Dennis Dao
 * July 3, 2022
 * v1.0
 */

// Program to implement the priority scheduling algorithm, under the assumption all processes arrive at the SAME time
#include <stdio.h>
#include <stdlib.h>

// Function prototypes
void enterInput(int *input, char* prompt); // Helper function for input

int main(void){
    // Variables
    int numProcesses;
    double avgWaitingTime = 0, avgCompletionTime = 0;
    char *msg1 = "Enter the number of processes (>0): "; // For specifying what user needs to input in the enterInput function
    char *msg2 = "Enter the burst time (>0): ";
    char *msg3 = "Enter the priority (>0): ";

    // Enter number of processes
    enterInput(&numProcesses, msg1);
    
    // Define id, burst time, priorities, and waiting time lists with a size equal to the amount of processes
    int burstTimes[numProcesses], pids[numProcesses], priorities[numProcesses], waitingTimes[numProcesses], completionTimes[numProcesses];
    printf("\n");

    // Enter burst times and priorites of process i
    for(int i = 0; i < numProcesses; i++){
        pids[i] = i+1;
        printf("For process[%d]:\n", pids[i]);
        // Enter burst times
        enterInput(&burstTimes[i], msg2);
        // Enter priorities
        enterInput(&priorities[i], msg3);
        printf("\n");
    }

    // Output process info for reference
    printf("The following has been input:\nPROCESS | BURST TIME | PRIORITY\n--------------------------------\n");
    for(int i = 0; i < numProcesses; i++){
        printf("%4d\t  %6d       %4d\n",pids[i], burstTimes[i], priorities[i]);
    }
    printf("\nThe priority scheduling algorithm will now be performed...\n\n");

    // Perform the scheduling algorithm
    // Sort by highest priority (lowest integer), will be indexed left to right so order must ascend
    for(int i = 0; i < numProcesses; i++){
        for(int j = 0; j < numProcesses - i - 1; j++){
            if(priorities[j] > priorities[j+1]){
                int temp;

                // Swap ids
                temp = pids[j];
                pids[j] = pids[j+1];
                pids[j+1] = temp;

                // Swap priorities
                temp = priorities[j];
                priorities[j] = priorities[j+1];
                priorities[j+1] = temp;

                // Swap bursts
                temp = burstTimes[j];
                burstTimes[j] = burstTimes[j+1];
                burstTimes[j+1] = temp;
            }
        }
    }

    // Determine waiting times and completion times
    for(int i = 0; i < numProcesses; i++){
        // If first process, no waiting, it is 1st in line
        // The completion time will be just the burst time
        if(i == 0){
            waitingTimes[i] = 0;
            completionTimes[i] = burstTimes[i];
        }
        else{
            // General formula - add the previous wait time with the previous burst time
            // The completion time will be the calculated waiting time plus the burst time
            waitingTimes[i] = waitingTimes[i-1] + burstTimes[i-1];
            completionTimes[i] = burstTimes[i] + waitingTimes[i];
        }
    }

    // Output process info, now with waiting time included
    printf("PROCESS | BURST TIME | PRIORITY | WAITING TIME | COMPLETION TIME\n-----------------------------------------------------------------\n");
    for(int i = 0; i < numProcesses; i++){
        printf("%4d\t  %6d       %4d\t     %4d\t%8d\n",pids[i], burstTimes[i], priorities[i], waitingTimes[i], completionTimes[i]);
    }
    printf("\n");

    // Calculate the average and output
    for(int i = 0; i < numProcesses; i++){
        avgWaitingTime += waitingTimes[i];
        avgCompletionTime += completionTimes[i];
    }
    avgWaitingTime /= numProcesses;
    avgCompletionTime /= numProcesses;
    printf("The final average waiting time is %f ms\n", avgWaitingTime);
    printf("The final average completion time is %f ms\n", avgCompletionTime);    
}

// Function definitions
// Helper function to get input
void enterInput(int *input, char* prompt){
    // For parsing the input
    char buffer[100];
    int ok = 0, temp;

    printf("%s", prompt);
    // Keep asking until a valid input
    while(!ok){
        fgets(buffer, sizeof(buffer), stdin);
        temp = atoi(buffer);

        // If 0 (intentionally or with non-integer) or negative, prompt the user again
        // The scheduling algorithm cannot be done with 0 or negative amounts of processes,
        // burst times, or priorities
        if(temp <= 0){
            puts("Invalid input. Try again.");
            printf("%s", prompt);
        }
        else{
            *input = temp;
            ok = 1;
        }
    }
}]0;dennis@LAPTOP-Dennis: ~/COMP3300/A4[01;32mdennis@LAPTOP-Dennis[00m:[01;34m~/COMP3300/A4[00m$ gcc -Wall a4.c -o a4
]0;dennis@LAPTOP-Dennis: ~/COMP3300/A4[01;32mdennis@LAPTOP-Dennis[00m:[01;34m~/COMP3300/A4[00m$ ./a4
Enter the number of processes (>0): 5

For process[1]:
Enter the burst time (>0): 10
Enter the priority (>0): 3

For process[2]:
Enter the burst time (>0): 1
Enter the priority (>0): 1

For process[3]:
Enter the burst time (>0): 2
Enter the priority (>0): 4

For process[4]:
Enter the burst time (>0): 1
Enter the priority (>0): 5

For process[5]:
Enter the burst time (>0): 5
Enter the priority (>0): 2

The following has been input:
PROCESS | BURST TIME | PRIORITY
--------------------------------
   1	      10          3
   2	       1          1
   3	       2          4
   4	       1          5
   5	       5          2

The priority scheduling algorithm will now be performed...

PROCESS | BURST TIME | PRIORITY | WAITING TIME | COMPLETION TIME
-----------------------------------------------------------------
   2	       1          1	        0	       1
   5	       5          2	        1	       6
   1	      10          3	        6	      16
   3	       2          4	       16	      18
   4	       1          5	       18	      19

The final average waiting time is 8.200000 ms
The final average completion time is 12.000000 ms
]0;dennis@LAPTOP-Dennis: ~/COMP3300/A4[01;32mdennis@LAPTOP-Dennis[00m:[01;34m~/COMP3300/A4[00m$ strace ./a4
execve("./a4", ["./a4"], 0x7ffd88394dc0 /* 20 vars */) = 0
brk(NULL)                               = 0x5634e9789000
arch_prctl(0x3001 /* ARCH_??? */, 0x7fffce7360e0) = -1 EINVAL (Invalid argument)
access("/etc/ld.so.preload", R_OK)      = -1 ENOENT (No such file or directory)
openat(AT_FDCWD, "/etc/ld.so.cache", O_RDONLY|O_CLOEXEC) = 3
fstat(3, {st_mode=S_IFREG|0644, st_size=33544, ...}) = 0
mmap(NULL, 33544, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f2ea6161000
close(3)                                = 0
openat(AT_FDCWD, "/lib/x86_64-linux-gnu/libc.so.6", O_RDONLY|O_CLOEXEC) = 3
read(3, "\177ELF\2\1\1\3\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\300A\2\0\0\0\0\0"..., 832) = 832
pread64(3, "\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0"..., 784, 64) = 784
pread64(3, "\4\0\0\0\20\0\0\0\5\0\0\0GNU\0\2\0\0\300\4\0\0\0\3\0\0\0\0\0\0\0", 32, 848) = 32
pread64(3, "\4\0\0\0\24\0\0\0\3\0\0\0GNU\0\30x\346\264ur\f|Q\226\236i\253-'o"..., 68, 880) = 68
fstat(3, {st_mode=S_IFREG|0755, st_size=2029592, ...}) = 0
mmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f2ea615f000
pread64(3, "\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0"..., 784, 64) = 784
pread64(3, "\4\0\0\0\20\0\0\0\5\0\0\0GNU\0\2\0\0\300\4\0\0\0\3\0\0\0\0\0\0\0", 32, 848) = 32
pread64(3, "\4\0\0\0\24\0\0\0\3\0\0\0GNU\0\30x\346\264ur\f|Q\226\236i\253-'o"..., 68, 880) = 68
mmap(NULL, 2037344, PROT_READ, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7f2ea5f6d000
mmap(0x7f2ea5f8f000, 1540096, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x22000) = 0x7f2ea5f8f000
mmap(0x7f2ea6107000, 319488, PROT_READ, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x19a000) = 0x7f2ea6107000
mmap(0x7f2ea6155000, 24576, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x1e7000) = 0x7f2ea6155000
mmap(0x7f2ea615b000, 13920, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7f2ea615b000
close(3)                                = 0
arch_prctl(ARCH_SET_FS, 0x7f2ea6160540) = 0
mprotect(0x7f2ea6155000, 16384, PROT_READ) = 0
mprotect(0x5634e8249000, 4096, PROT_READ) = 0
mprotect(0x7f2ea6197000, 4096, PROT_READ) = 0
munmap(0x7f2ea6161000, 33544)           = 0
fstat(1, {st_mode=S_IFCHR|0620, st_rdev=makedev(0x88, 0x6), ...}) = 0
brk(NULL)                               = 0x5634e9789000
brk(0x5634e97aa000)                     = 0x5634e97aa000
fstat(0, {st_mode=S_IFCHR|0620, st_rdev=makedev(0x88, 0x6), ...}) = 0
write(1, "Enter the number of processes (>"..., 36Enter the number of processes (>0): ) = 36
read(0, 5
"5\n", 1024)                    = 2
write(1, "\n", 1
)                       = 1
write(1, "For process[1]:\n", 16For process[1]:
)       = 16
write(1, "Enter the burst time (>0): ", 27Enter the burst time (>0): ) = 27
read(0, 10
"10\n", 1024)                   = 3
write(1, "Enter the priority (>0): ", 25Enter the priority (>0): ) = 25
read(0, 3
"3\n", 1024)                    = 2
write(1, "\n", 1
)                       = 1
write(1, "For process[2]:\n", 16For process[2]:
)       = 16
write(1, "Enter the burst time (>0): ", 27Enter the burst time (>0): ) = 27
read(0, 1
"1\n", 1024)                    = 2
write(1, "Enter the priority (>0): ", 25Enter the priority (>0): ) = 25
read(0, 1
"1\n", 1024)                    = 2
write(1, "\n", 1
)                       = 1
write(1, "For process[3]:\n", 16For process[3]:
)       = 16
write(1, "Enter the burst time (>0): ", 27Enter the burst time (>0): ) = 27
read(0, 2
"2\n", 1024)                    = 2
write(1, "Enter the priority (>0): ", 25Enter the priority (>0): ) = 25
read(0, 4
"4\n", 1024)                    = 2
write(1, "\n", 1
)                       = 1
write(1, "For process[4]:\n", 16For process[4]:
)       = 16
write(1, "Enter the burst time (>0): ", 27Enter the burst time (>0): ) = 27
read(0, 1
"1\n", 1024)                    = 2
write(1, "Enter the priority (>0): ", 25Enter the priority (>0): ) = 25
read(0, 5
"5\n", 1024)                    = 2
write(1, "\n", 1
)                       = 1
write(1, "For process[5]:\n", 16For process[5]:
)       = 16
write(1, "Enter the burst time (>0): ", 27Enter the burst time (>0): ) = 27
read(0, 5
"5\n", 1024)                    = 2
write(1, "Enter the priority (>0): ", 25Enter the priority (>0): ) = 25
read(0, 2
"2\n", 1024)                    = 2
write(1, "\n", 1
)                       = 1
write(1, "The following has been input:\nPR"..., 62The following has been input:
PROCESS | BURST TIME | PRIORITY
) = 62
write(1, "--------------------------------"..., 33--------------------------------
) = 33
write(1, "   1\t      10          3\n", 25   1	      10          3
) = 25
write(1, "   2\t       1          1\n", 25   2	       1          1
) = 25
write(1, "   3\t       2          4\n", 25   3	       2          4
) = 25
write(1, "   4\t       1          5\n", 25   4	       1          5
) = 25
write(1, "   5\t       5          2\n", 25   5	       5          2
) = 25
write(1, "\nThe priority scheduling algorit"..., 60
The priority scheduling algorithm will now be performed...
) = 60
write(1, "\n", 1
)                       = 1
write(1, "PROCESS | BURST TIME | PRIORITY "..., 65PROCESS | BURST TIME | PRIORITY | WAITING TIME | COMPLETION TIME
) = 65
write(1, "--------------------------------"..., 66-----------------------------------------------------------------
) = 66
write(1, "   2\t       1          1\t       "..., 44   2	       1          1	        0	       1
) = 44
write(1, "   5\t       5          2\t       "..., 44   5	       5          2	        1	       6
) = 44
write(1, "   1\t      10          3\t       "..., 44   1	      10          3	        6	      16
) = 44
write(1, "   3\t       2          4\t       "..., 44   3	       2          4	       16	      18
) = 44
write(1, "   4\t       1          5\t       "..., 44   4	       1          5	       18	      19
) = 44
write(1, "\n", 1
)                       = 1
write(1, "The final average waiting time i"..., 46The final average waiting time is 8.200000 ms
) = 46
write(1, "The final average completion tim"..., 50The final average completion time is 12.000000 ms
) = 50
exit_group(0)                           = ?
+++ exited with 0 +++
]0;dennis@LAPTOP-Dennis: ~/COMP3300/A4[01;32mdennis@LAPTOP-Dennis[00m:[01;34m~/COMP3300/A4[00m$ exit
exit

Script done on 2022-07-19 17:28:22-04:00 [COMMAND_EXIT_CODE="0"]
